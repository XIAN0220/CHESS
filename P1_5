def can_king_move(checkerboard, x1, y1, x2, y2):
    if x1 == x2 and y1 == y2:
        return "No"
    if checkerboard[x1][y1] != 1:
        return "No"
    king_moves = [
      (1,1),(1,0),(0,1),(-1,0),
      (0,-1),(-1,-1),(-1,1),(1,-1)
  ]
    valid_move = any(x1 + dx == x2 and y1 + dy == y2 for dx, dy in king_moves)
    if valid_move and checkerboard[x2][y2] == 0:
        return "Yes"

    return "No"

#=====================================================================
def can_queen_move(checkerboard, x1, y1, x2, y2):
    if x1 == x2 and y1 == y2:
        return "No"
    if checkerboard[x1][y1] != 1:
        return "No"
    dx = x2 - x1
    dy = y2 - y1
    if dx != 0 and dy != 0 and abs(dx) != abs(dy):
        return "No"
    step_x = 0 if dx == 0 else dx // abs(dx)
    step_y = 0 if dy == 0 else dy // abs(dy)
    cx, cy = x1 + step_x, y1 + step_y
    while cx != x2 or cy != y2:
        if checkerboard[cx][cy] == 1:
            return "No"
        cx += step_x
        cy += step_y
    if checkerboard[x2][y2] == 1:
        return "No"
    return "Yes"
#=====================================================================
def can_soldier_move(checkerboard, x1, y1, x2, y2):
    if x1 == x2 and y1 == y2:
        return "No"
    if checkerboard[x1][y1] != 1:
        return "No"
    if x2 == x1 + 1 and y1 == y2:
        if checkerboard[x2][y2] == 0:
            return "Yes"
    return "No"
#======================================================================
def can_knight_move(checkerboard, x1, y1, x2, y2):
    if x1 == x2 and y1 == y2:
        return "No"
    if checkerboard[x1][y1] != 1:
        return "No"
    knight_moves = [
        (2, 1), (2, -1), (-2, 1), (-2, -1),
        (1, 2), (1, -2), (-1, 2), (-1, -2)
    ]
    valid_move = any(x1 + dx == x2 and y1 + dy == y2 for dx, dy in knight_moves)
    if valid_move and checkerboard[x2][y2] == 0:
        return "Yes"

    return "No"

#===========================================================================
def can_rook_move(checkerboard, x1, y1, x2, y2):
    if x1 == x2 and y1 == y2:
        return "No"
    if checkerboard[x1][y1] != 1:
        return "No"
    if x1 != x2 and y1 != y2:
        return "No"
    
    step_x = 0 if x1 == x2 else (x2 - x1) // abs(x2 - x1)
    step_y = 0 if y1 == y2 else (y2 - y1) // abs(y2 - y1)
    
    cx, cy = x1 + step_x, y1 + step_y
    while cx != x2 or cy != y2:
        if checkerboard[cx][cy] == 1:
            return "No"
        cx += step_x
        cy += step_y
    
    if checkerboard[x2][y2] == 1:
        return "No"
    return "Yes"
#===========================================================================
def can_bishop_move(checkerboard, x1, y1, x2, y2):
    if x1 == x2 and y1 == y2:
        return "No"
    if checkerboard[x1][y1] != 1:
        return "No"
    if abs(x2 - x1) != abs(y2 - y1):
        return "No"
    
    step_x = (x2 - x1) // abs(x2 - x1)
    step_y = (y2 - y1) // abs(y2 - y1)
    
    cx, cy = x1 + step_x, y1 + step_y
    while cx != x2 and cy != y2:
        if checkerboard[cx][cy] == 1:
            return "No"
        cx += step_x
        cy += step_y
    
    if checkerboard[x2][y2] == 1:
        return "No"
    return "Yes"
#==========================================================================

if __name__ == "__main__":

    if True:
        code = input()
        x1, y1 = map(int, input().split())
        x2, y2 = map(int, input().split())
        if not (0 <= x1 <= 7 and 0 <= y1 <= 7 and 0 <= x2 <= 7 and 0 <= y2 <= 7):
            print("Coordinates must be between 0 and 7.")
        elif code =="國王":
           print(can_king_move(checkerboard, x1, y1, x2, y2))
        elif code =="皇后":
          print(can_queen_move(checkerboard, x1, y1, x2, y2))
        elif code =="主教":
          print(can_bishop_move(checkerboard, x1, y1, x2, y2))
        elif code =="城堡":
          print(can_rook_move(checkerboard, x1, y1, x2, y2))
        elif code =="士兵":
          print(can_soldier_move(checkerboard, x1, y1, x2, y2))
        else:
            print(can_knight_move(checkerboard, x1, y1, x2, y2))
